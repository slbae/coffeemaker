package edu.ncsu.csc.CoffeeMaker.config;

import java.io.IOException;
import java.util.Set;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.authority.AuthorityUtils;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;

/**
 * This class will tell Spring Security where to send a user after they have
 * been authenticated. This is due to the User being pulled in when they attempt
 * to login.
 *
 * Implementation was aided with reference to the Spring API:
 * https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/web/authentication/AuthenticationSuccessHandler.html
 *
 * and CodeJava.net article:
 * https://www.codejava.net/frameworks/spring-boot/spring-security-authentication-success-handler-examples
 *
 * @author Caleb Twigg
 */
public class CustomLoginSuccessHandler implements AuthenticationSuccessHandler {

    /**
     * Whenever a user is authenticated, they need to be sent to a page based on
     * their role, or to the error page if there is a backend issue
     *
     * @param request
     *            an instance of a HTTPServletResponse which allows us to
     *            interact with the current HTTPSession
     * @param response
     *            the associated response of the current HTTPSession. Can
     *            interact with the pages that a user is currently viewing
     * @param authentication
     *            the Authentication token generated by the WebSecuirtyConfig
     *            class
     * @throws IOException
     *             to ServletException if this method is called improperly
     */
    @Override
    public void onAuthenticationSuccess ( final HttpServletRequest request, final HttpServletResponse response,
            final Authentication authentication ) throws IOException, ServletException {
        final Set<String> roles = AuthorityUtils.authorityListToSet( authentication.getAuthorities() );

        final User currentUser = (User) authentication.getPrincipal();

        // Assign that as an attribute for the current session
        final HttpSession session = request.getSession();
        session.setAttribute( "userName", currentUser.getUsername() );

        // A staff member needs to go to the staff main page
        if ( roles.contains( "Staff" ) ) {
            response.sendRedirect( "/staffMainPage" );
        }
        // A customer needs to go to their main page
        else if ( roles.contains( "Customer" ) ) {
            response.sendRedirect( "/customerMainPage" );
        }
        // Otherwise there was an issue and they need to go to the error page
        else {
            response.sendRedirect( "/error" );
        }
    }
}
